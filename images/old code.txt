# import asyncio
# import io
# import glob
# import os
# import sys
# import time
# import uuid
# import requests
# from urllib.parse import urlparse
# from io import BytesIO
# from PIL import Image, ImageDraw
# from azure.cognitiveservices.vision.face import FaceClient
# from msrest.authentication import CognitiveServicesCredentials
# from azure.cognitiveservices.vision.face.models import TrainingStatusType, Person, SnapshotObjectType, OperationStatusType
# from face_api_config import config
#
# # Set the FACE_SUBSCRIPTION_KEY environment variable with your key as the value.
# # This key will serve all examples in this document.
# KEY ="37b7506bc88f4467aa6c251545340b99" #os.environ['FACE_SUBSCRIPTION_KEY']
#
# # Set the FACE_ENDPOINT environment variable with the endpoint from your Face service in Azure.
# # This endpoint will be used in all examples in this quickstart.
# ENDPOINT = "https://faceapiarik.cognitiveservices.azure.com/" #os.environ['FACE_ENDPOINT']
#
#
#
# face_client = FaceClient(ENDPOINT, CognitiveServicesCredentials(KEY))
#
#
# # Detect a face in an image that contains a single face
# single_face_image_url = 'https://www.biography.com/.image/t_share/MTQ1MzAyNzYzOTgxNTE0NTEz/john-f-kennedy---mini-biography.jpg'
# single_image_name = os.path.basename(single_face_image_url)
# detected_faces = face_client.face.detect_with_url(url=single_face_image_url)
# if not detected_faces:
#     raise Exception('No face detected from image {}'.format(single_image_name))
#
# # Display the detected face ID in the first single-face image.
# # Face IDs are used for comparison to faces (their IDs) detected in other images.
# print('Detected face ID from', single_image_name, ':')
# for face in detected_faces: print (face.face_id)
#
# # Save this ID for use in Find Similar
# first_image_face_ID = detected_faces[0].face_id
#
#
#
#
# # # Detect a face in an image that contains a single face
# # single_face_image_url = 'https://raw.githubusercontent.com/Microsoft/Cognitive-Face-Windows/master/Data/detection1.jpg'
# # single_image_name = os.path.basename(single_face_image_url)
# # detected_faces = face_client.face.detect_with_url(url=single_face_image_url)
# # if not detected_faces:
# #     raise Exception('No face detected from image {}'.format(single_image_name))
#
# # Convert width height to a point in a rectangle
# def getRectangle(faceDictionary):
#     rect = faceDictionary.face_rectangle
#     left = rect.left
#     top = rect.top
#     right = left + rect.width
#     bottom = top + rect.height
#     return (left, top), (right, bottom)
#
#
# # # Download the image from the url
# # response = requests.get(single_face_image_url)
# # img = Image.open(BytesIO(response.content))
# #
# # # For each face returned use the face rectangle and draw a red box.
# # print('Drawing rectangle around face... see popup for results.')
# # draw = ImageDraw.Draw(img)
# # for face in detected_faces:
# #     draw.rectangle(getRectangle(face), outline='red')
#
# # Display the image in the users default image browser.
# # img.show()
#
#
#
# # Detect the faces in an image that contains multiple faces
# # Each detected face gets assigned a new ID
# multi_face_image_url = "http://www.historyplace.com/kennedy/president-family-portrait-closeup.jpg"
# multi_image_name = os.path.basename(multi_face_image_url)
# detected_faces = face_client.face.detect_with_url(url=multi_face_image_url)
#
# third_image = "./images/kenedy.jpg"
# multi_image_name_2 = os.path.basename(third_image)
# with open(third_image, "rb") as f:
#     detected_faces2 = face_client.face.detect_with_stream(f)
# # Search through faces detected in group image for the single face from first image.
# # First, create a list of the face IDs found in the second image.
# second_image_face_IDs = list(map(lambda x: x.face_id, detected_faces))
# third_image_face_IDs = list(map(lambda x: x.face_id, detected_faces2))
#
#
# # combined = second_image_face_IDs + third_image_face_IDs
# # Next, find similar face IDs like the one detected in the first image.
#
# similar_faces = face_client.face.find_similar(face_id=first_image_face_ID, face_ids=second_image_face_IDs)
# similar_faces_2 = face_client.face.find_similar(face_id=first_image_face_ID, face_ids=third_image_face_IDs)
# if not similar_faces[0]:
#     print('No similar faces found in', multi_image_name, '.')
# if not similar_faces_2[0]:
#     print('No similar faces found in', multi_image_name_2, '.')
# print(similar_faces[0])
# print(similar_faces_2[0])
# #
# # print(similar_faces)
# # print(type(similar_faces))
# # print(len(similar_faces))
#
#
# # # Download the image from the url
# # response = requests.get(multi_face_image_url)
# # img = Image.open(BytesIO(response.content))
#
# # # For each face returned use the face rectangle and draw a red box.
# # print('Drawing rectangle around face... see popup for results.')
# # draw = ImageDraw.Draw(img)
# # for face in detected_faces:
# #     draw.rectangle(getRectangle(face), outline='red')
#
# # # # Display the image in the users default image browser.
# # img.show()
#
# most_largest_photo = [0, ""]
# # Print the details of the similar faces detected
# print('Similar faces found in', multi_image_name + ':')
# for face in similar_faces:
#     first_image_face_ID = face.face_id
#     print(face)
#     # The similar face IDs of the single face image and the group image do not need to match,
#     # they are only used for identification purposes in each image.
#     # The similar faces are matched using the Cognitive Services algorithm in find_similar().
#     face_info = next(x for x in detected_faces if x.face_id == first_image_face_ID)
#     if face_info:
#         sum_face = int(face_info.face_rectangle.width)*int(face_info.face_rectangle.height)
#         if most_largest_photo[0] < sum_face:
#             most_largest_photo[0] = sum_face
#             most_largest_photo[1] = multi_image_name
#         print('  Face ID: ', face_info.face_id)
#         print('  Face rectangle:')
#         print('    Left: ', str(face_info.face_rectangle.left))
#         print('    Top: ', str(face_info.face_rectangle.top))
#         print('    Width: ', str(face_info.face_rectangle.width))
#         print('    Height: ', str(face_info.face_rectangle.height))
#         print('    Confident: ', str(face.confidence))
#
#
# print('Similar faces found in', multi_image_name_2 + ':')
# for face in similar_faces_2:
#     first_image_face_ID = face.face_id
#     print(face)
#     # The similar face IDs of the single face image and the group image do not need to match,
#     # they are only used for identification purposes in each image.
#     # The similar faces are matched using the Cognitive Services algorithm in find_similar().
#     face_info = next(x for x in detected_faces2 if x.face_id == first_image_face_ID)
#     if face_info:
#         sum_face = int(face_info.face_rectangle.width) * int(face_info.face_rectangle.height)
#         if most_largest_photo[0] < sum_face:
#             most_largest_photo[0] = sum_face
#             most_largest_photo[1] = multi_image_name_2
#         print('  Face ID: ', face_info.face_id)
#         print('  Face rectangle:')
#         print('    Left: ', str(face_info.face_rectangle.left))
#         print('    Top: ', str(face_info.face_rectangle.top))
#         print('    Width: ', str(face_info.face_rectangle.width))
#         print('    Height: ', str(face_info.face_rectangle.height))
#         print('    Confident: ', str(face.confidence))
#
#
# print(f"Largest Image is : {most_largest_photo[1]}")
# print(f"Sum is: {most_largest_photo[0]}")
#